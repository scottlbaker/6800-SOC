 
                      ;=======================================================
                      ;=======================================================
                      ;  6800 SOC mini monitor
                      ;=======================================================
                      ;=======================================================
 
                      DEBUG EQU 0
 
                      ;=======================================================
                      ; Defines
                      ;=======================================================
 
                      ; UART register addresses
                      ;
                      UARTCNTL      EQU    $0000
                      UARTBSR0      EQU    $0001
                      UARTBSR1      EQU    $0002
                      UARTSTAT      EQU    $0003
                      UARTMASK      EQU    $0004
                      UARTDATA      EQU    $0005
 
                      ; UART baud rate
                      ;
                      BAUD0         EQU    $e3     ; 115200
                      BAUD1         EQU    $78     ; 115200
 
                      ; UART status register bit definitions
                      ;
                      FRAMINGERROR  EQU    $40
                      PARITYERROR   EQU    $20
                      OVERRUNERR    EQU    $10
                      TXFIFOEMPTY   EQU    $08
                      TXNOTFULL     EQU    $04
                      RXFIFOFULL    EQU    $02
                      RXNOTEMPTY    EQU    $01
 
                      ; TIMER register addresses
                      ;
                      TIMRCNTL      EQU    $0008
                      TIMRSTAT      EQU    $0008
                      TIMRICL       EQU    $0009
                      TIMRICH       EQU    $000A
 
                      TIME0         EQU    $88     ; 5 seconds
                      TIME1         EQU    $13     ; 5 seconds
                      TMSTART       EQU    $01     ; start timer
 
                      TMDONE        EQU    $04     ; timer done
                      TMSTOP        EQU    $00     ; stop timer
 
                      ; Other register address
                      ;
                      OPORTA        EQU    $000C   ; port A
                      IMASK         EQU    $000D   ; interrupt mask
                      RANDCNTL      EQU    $000E   ; random number start/stop
                      RANDMASK      EQU    $000F   ; random number mask
                      RANDDATA      EQU    $000F   ; random number
                      ISRC          EQU    $0010   ; interrupt source
 
                      ; Initial Stack Pointer
                      ;
                      STKTOP        EQU    $FFF0
 
                      ;=======================================================
                      ; Page Zero
                      ;=======================================================
                                ORG   $F000
 
 F000 0D0A            BANNER:   FCB   $0D,$0A
 F002 57656C636F6D65            FCB   "Welcome to 6800 Monitor"
 F009 20746F20363830
 F010 30204D6F6E6974
 F017 6F72
 F019 0D0A00          CRLF:     FCB   $0D,$0A,0
 
 F01C 0D0A3E2000      PROMPT:   FCB   $0D,$0A,"> ",0
 
 F021 2000            SPACE:    FCB   " ",0
 
 F023 0D0A0D0A        HELPMSG:  FCB   $0D,$0A,$0D,$0A
 F027 436F6D6D616E64            FCB   "Command Summary:",$0D,$0A
 F02E 2053756D6D6172
 F035 793A0D0A
 F039 68202020202020            FCB   "h      .. print this help 
message",$0D,$0A
 F040 2E2E207072696E
 F047 74207468697320
 F04E 68656C70206D65
 F055 73736167650D0A
 F05C 63202020202020            FCB   "c      .. clear screen",$0D,$0A
 F063 2E2E20636C6561
 F06A 72207363726565
 F071 6E0D0A
 F074 72202020202020            FCB   "r      .. soft reset",$0D,$0A
 F07B 2E2E20736F6674
 F082 2072657365740D
 F089 0A
 F08A 6F202020202020            FCB   "o      .. toggle output port",$0D,$0A
 F091 2E2E20746F6767
 F098 6C65206F757470
 F09F 757420706F7274
 F0A6 0D0A
 F0A8 67206164647220            FCB   "g addr .. jump to address",$0D,$0A
 F0AF 2E2E206A756D70
 F0B6 20746F20616464
 F0BD 726573730D0A
 F0C3 0D0A00                    FCB   $0D,$0A,0
 
 F0C6 0D0A            UNKNOWN:  FCB   $0D,$0A
 F0C8 556E6B6E6F776E            FCB   "Unknown Command"
 F0CF 20436F6D6D616E
 F0D6 64
 F0D7 0D0A00                    FCB   $0D,$0A,0
 
 F0DA 1B5B324A        CLEARSCR: FCB   $1B,$5B,$32,$4A
 F0DE 1B5B313B314800            FCB   $1B,$5B,$31,$3B,$31,$48,0
 
 F0E5 00000000000000  BUFFER    FCB   0,0,0,0,0,0,0,0
 F0EC 00
 
                      ;=======================================================
                      ; Start Point
                      ;=======================================================
 
 F0ED 8EFFF0          START:    LDS   #STKTOP     ;; Init the stack pointer
 F0F0 BDF140                    JSR   INITUART    ;; Initialize UART
 F0F3 CEF000                    LDX   #BANNER     ;; hello message
 F0F6 BDF14D                    JSR   PUTS
 
 F0F9 CEF01C          MAIN:     LDX   #PROMPT     ;; send prompt
 F0FC BDF14D                    JSR   PUTS
 F0FF BDF165                    JSR   GETC        ;; get a char
 F102 BDF15A                    JSR   PUTC        ;; put a char
 F105 BDF1E7                    JSR   TOUPPER     ;; to upper case
 
 F108 8148                      CMPA  #'H'        ;; help
 F10A 271A                      BEQ   CMD_HELP
 
 F10C 8143                      CMPA  #'C'        ;; clear screen
 F10E 271E                      BEQ   CMD_CLR
 
 F110 8152                      CMPA  #'R'        ;; restart
 F112 27D9                      BEQ   START
 
 F114 814F                      CMPA  #'O'        ;; output to port
 F116 271E                      BEQ   CMD_OUT
 
 F118 8147                      CMPA  #'G'        ;; goto address
 F11A 271F                      BEQ   CMD_GOTO
 
 F11C 810D                      CMPA  #$0D        ;; enter key
 F11E 27D9                      BEQ   MAIN
 
 F120 CEF0C6          CMD_NONE: LDX   #UNKNOWN    ;; unknown command
 F123 BDF14D                    JSR   PUTS
 
 F126 CEF023          CMD_HELP: LDX   #HELPMSG    ;; help message
 F129 BDF14D                    JSR   PUTS
 F12C 20CB                      BRA   MAIN        ;; goto main loop
 
 F12E CEF0DA          CMD_CLR:  LDX   #CLEARSCR   ;; clear the screen
 F131 BDF14D                    JSR   PUTS
 F134 20C3                      BRA   MAIN        ;; goto main loop
 
 F136 7C000C          CMD_OUT:  INC   OPORTA      ;; blink LED
 F139 20BE                      BRA   MAIN        ;; goto main loop
 
 F13B BDF198          CMD_GOTO: JSR   GOADDR      ;; goto address
 F13E 20B9                      BRA   MAIN        ;; goto main loop
 
 
                      ;=======================================================
                      ; Initialize the UART
                      ;   inputs  : none
                      ;   outputs : none
                      ;   destroys: A
                      ;=======================================================
 F140 86E3            INITUART: LDAA #BAUD0       ;; baud rate
 F142 9701                      STAA UARTBSR0
 F144 8678                      LDAA #BAUD1
 F146 9702                      STAA UARTBSR1
 F148 8603                      LDAA #$03         ;; enable TX and RX
 F14A 9700                      STAA UARTCNTL
 F14C 39                        RTS
                       
                      ;=======================================================
                      ; Send a string to the UART
                      ;   inputs : X contains pointer to string
                      ;   outputs: X points to null
                      ;=======================================================
 F14D 36              PUTS:     PSHA             ;; save A
 F14E A600            PUTLOOP:  LDAA ,X          ;; load A with next char
 F150 2706                      BEQ  PUTDONE     ;; exit if done
 F152 08                        INX              ;; increment pointer
 F153 BDF15A                    JSR  PUTC        ;; put a character
 F156 20F6                      BRA  PUTLOOP     ;; repeat
 F158 32              PUTDONE:  PULA             ;; restore A
 F159 39                        RTS
 
                      ;=======================================================
                      ; Send a single character to the UART
                      ;=======================================================
 F15A 36              PUTC:     PSHA              ;; save A
 F15B 9603            TXFULL:   LDAA UARTSTAT     ;; get TX UART status
 F15D 8404                      ANDA #TXNOTFULL   ;; TX FIFO full?
 F15F 27FA                      BEQ  TXFULL       ;; wait if full
 F161 32                        PULA              ;; restore A
 F162 9705                      STAA UARTDATA     ;; put a character
 F164 39                        RTS
 
                      ;=======================================================
                      ; Get a single character from the UART
                      ;   inputs:  none
                      ;   outputs: A contains received character
                      ;=======================================================
 F165 9603            GETC:     LDAA UARTSTAT     ;; get RX UART status
 F167 8401                      ANDA #RXNOTEMPTY  ;; RX FIFO empty?
 F169 27FA                      BEQ  GETC         ;; wait if empty
 F16B 9605                      LDAA UARTDATA     ;; get a character
 F16D 39                        RTS
 
                      ;=======================================================
                      ; Get a line from the UART (with echo)
                      ;   inputs : X points to return buffer
                      ;   outputs: A contains count of bytes
                      ;   Echoes to UART.
                      ;   Terminate line on 0x0D (CR)
                      ;=======================================================
 F16E BDF165          GETLE:    JSR  GETC         ;; get next character
 F171 810D                      CMPA #$0D         ;; check for CR
 F173 270C                      BEQ  GLEX         ;; exit if found
 F175 811B                      CMPA #$1B         ;; check for ESC
 F177 2708                      BEQ  GLEX         ;; exit if found
 F179 A700                      STAA ,X           ;; store the char
 F17B 08                        INX               ;; increment pointer
 F17C BDF15A                    JSR  PUTC         ;; echo          
 F17F 20ED                      BRA  GETLE        ;; loop
 
 F181 39              GLEX:     RTS
                       
                      ;=======================================================
                      ; Get a line from the UART (no echo)
                      ;   inputs : X points to return buffer
                      ;   outputs: A contains count of bytes
                      ;     Terminate line on 0x0D (CR)
                      ;     Discard 0x0A (LF)
                      ;=======================================================
 F182 BDF165          GETLN:    JSR  GETC         ;; get next character
 F185 810A                      CMPA #$0A         ;; check for LineFeed
 F187 27F9                      BEQ  GETLN        ;; discard if found
 F189 810D                      CMPA #$0D         ;; check for CR
 F18B 2705                      BEQ  GLNX         ;; exit if found
 F18D A700                      STAA ,X           ;; store the char
 F18F 08                        INX               ;; increment pointer
 F190 20F0                      BRA  GETLN        ;; loop
 
 F192 8600            GLNX:     LDAA #0           ;; load A with null
 F194 A700                      STAA ,X           ;; store null char
 F196 08                        INX               ;; increment pointer
 F197 39                        RTS
 
                      ;=======================================================
                      ; Jump to (goto) address
                      ;=======================================================
 F198 CEF0E5          GOADDR:   LDX   #BUFFER
 F19B C604                      LDAB  #4          ;; loop counter
 F19D 8620                      LDAA  #$20        ;; put a space
 F19F BDF15A                    JSR   PUTC
 F1A2 BDF165          GOADD1:   JSR   GETC
 F1A5 BDF15A                    JSR   PUTC
 F1A8 BDF1F2                    JSR   ISDIGIT     ;; check if digit
 F1AB 240D                      BCC   GOADD2      ;; branch if digit
 F1AD BDF1E7                    JSR   TOUPPER
 F1B0 BDF1FE                    JSR   ISHEX2      ;; check if A-F
 F1B3 2504                      BCS   GOADDX      ;; return if invalid
 F1B5 8037                      SUBA  #$37        ;; hex to binary
 F1B7 2003                      BRA   GOADD3
 F1B9 39              GOADDX:   RTS
 F1BA 8030            GOADD2:   SUBA  #$30        ;; digit to binary
 F1BC A700            GOADD3:   STAA  ,X
 F1BE 08                        INX               ;; buffer+1
 F1BF 5A                        DECB
 F1C0 26E0                      BNE   GOADD1
 F1C2 CEF0E5          GOADD4:   LDX   #BUFFER     ;; convert buffer
 F1C5 A600                      LDAA  ,X
 F1C7 08                        INX               ;; buffer+1
 F1C8 E600                      LDAB  ,X
 F1CA 48                        ASLA              ;; shift upper nibble
 F1CB 48                        ASLA              ;; x4
 F1CC 48                        ASLA              ;; x8
 F1CD 48                        ASLA              ;; x16
 F1CE 1B                        ABA               ;; combine nibbles
 F1CF 09                        DEX               ;; buffer
 F1D0 A700                      STAA  ,X          ;; store to buffer
 F1D2 08                        INX               ;; buffer+1
 F1D3 08                        INX               ;; buffer+2
 F1D4 A600                      LDAA  ,X
 F1D6 08                        INX               ;; buffer+3
 F1D7 E600                      LDAB  ,X
 F1D9 48                        ASLA              ;; shift upper nibble
 F1DA 48                        ASLA              ;; x4
 F1DB 48                        ASLA              ;; x8
 F1DC 48                        ASLA              ;; x16
 F1DD 1B                        ABA               ;; combine nibbles
 F1DE 09                        DEX               ;; buffer+2
 F1DF 09                        DEX               ;; buffer+1
 F1E0 A700                      STAA  ,X          ;; store to buffer+1
 F1E2 FEF0E5                    LDX   BUFFER      ;; 16-bit address
 F1E5 6E00                      JMP   ,X          ;; now in buffer
 
                      ;=======================================================
                      ; Convert to upper case
                      ;=======================================================
 F1E7 8161            TOUPPER:  CMPA #'a'         ;; check lower bound
 F1E9 2D06                      BLT  TOUPPX       ;; return if below 'a'
 F1EB 817A                      CMPA #'z'         ;; check upper bound
 F1ED 2E02                      BGT  TOUPPX       ;; return if above 'z'
 F1EF 8020                      SUBA #32          ;; convert to upper
 F1F1 39              TOUPPX:   RTS
 
                      ;=======================================================
                      ; Check if digit (clear carry bit if digit)
                      ;=======================================================
 F1F2 8130            ISDIGIT:  CMPA #'0'         ;; check lower bound
 F1F4 2D06                      BLT  NODIG        ;; return if below 'a'
 F1F6 8139                      CMPA #'9'         ;; check upper bound
 F1F8 2E02                      BGT  NODIG        ;; return if above 'z'
 F1FA 0C                        CLC
 F1FB 39                        RTS
 F1FC 0D              NODIG:    SEC
 F1FD 39                        RTS
 
                      ;=======================================================
                      ; Check if hex A-F (clear carry bit if digit)
                      ;=======================================================
 F1FE 8141            ISHEX2:   CMPA #'A'         ;; check lower bound
 F200 2D06                      BLT  NOHEX2       ;; return if below 'a'
 F202 8146                      CMPA #'F'         ;; check upper bound
 F204 2E02                      BGT  NOHEX2       ;; return if above 'z'
 F206 0C                        CLC
 F207 39                        RTS
 F208 0D              NOHEX2:   SEC
 F209 39                        RTS
 
 
                      ;=======================================================
                      ; Wait
                      ;=======================================================
 F20A 8688            WAIT1:    LDAA #TIME0       ;; initial count
 F20C 9709                      STAA TIMRICL
 F20E 8613                      LDAA #TIME1
 F210 970A                      STAA TIMRICH
 F212 8601                      LDAA #TMSTART     ;; start timer
 F214 9708                      STAA TIMRCNTL
 F216 9608            WAIT2:    LDAA TIMRSTAT     ;; read status
 F218 8404                      ANDA #TMDONE
 F21A 27FA                      BEQ  WAIT2
 F21C 39                        RTS
 
 
                      ;=======================================================
                      ;        Vectors
                      ;=======================================================
 
                                ORG  $FFF8
 
 FFF8 F0ED                      FDB  START   ;; IRQ
 FFFA F0ED                      FDB  START   ;; SWI
 FFFC F0ED                      FDB  START   ;; NMI
 FFFE F0ED                      FDB  START   ;; RESET

SYMBOL TABLE
    BANNER 02 F000     BAUD0 00 00E3     BAUD1 00 0078    BUFFER 02 F0E5
  CLEARSCR 02 F0DA   CMD_CLR 02 F12E  CMD_GOTO 02 F13B  CMD_HELP 02 F126
  CMD_NONE 02 F120   CMD_OUT 02 F136      CRLF 02 F019     DEBUG 00 0000
 FRAMINGERROR 00 0040      GETC 02 F165     GETLE 02 F16E     GETLN 02 F182
      GLEX 02 F181      GLNX 02 F192    GOADD1 02 F1A2    GOADD2 02 F1BA
    GOADD3 02 F1BC    GOADD4 02 F1C2    GOADDR 02 F198    GOADDX 02 F1B9
   HELPMSG 02 F023     IMASK 00 000D  INITUART 02 F140   ISDIGIT 02 F1F2
    ISHEX2 02 F1FE      ISRC 00 0010      MAIN 02 F0F9     NODIG 02 F1FC
    NOHEX2 02 F208    OPORTA 00 000C OVERRUNERR 00 0010 PARITYERROR 00 0020
    PROMPT 02 F01C      PUTC 02 F15A   PUTDONE 02 F158   PUTLOOP 02 F14E
      PUTS 02 F14D  RANDCNTL 00 000E  RANDDATA 00 000F  RANDMASK 00 000F
 RXFIFOFULL 00 0002 RXNOTEMPTY 00 0001     SPACE 02 F021     START 02 F0ED
    STKTOP 00 FFF0     TIME0 00 0088     TIME1 00 0013  TIMRCNTL 00 0008
   TIMRICH 00 000A   TIMRICL 00 0009  TIMRSTAT 00 0008    TMDONE 00 0004
   TMSTART 00 0001    TMSTOP 00 0000   TOUPPER 02 F1E7    TOUPPX 02 F1F1
 TXFIFOEMPTY 00 0008    TXFULL 02 F15B TXNOTFULL 00 0004  UARTBSR0 00 0001
  UARTBSR1 00 0002  UARTCNTL 00 0000  UARTDATA 00 0005  UARTMASK 00 0004
  UARTSTAT 00 0003   UNKNOWN 02 F0C6     WAIT1 02 F20A     WAIT2 02 F216
72 SYMBOLS

0 error(s), 0 warning(s)
